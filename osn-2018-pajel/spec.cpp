#include <tcframe/spec.hpp>
#include <bits/stdc++.h>
using namespace tcframe;
using namespace std;

typedef pair<int,int> PII;

class ProblemSpec : public BaseProblemSpec {
protected:
    int N, P;
    vector<string> UP, DOWN, LEFT, RIGHT;

    void InputFormat() {
        LINE(N, P);
        LINE(UP % SIZE(N));
        LINES(LEFT, RIGHT) % SIZE(N);
        LINE(DOWN % SIZE(N));
    }

    void StyleConfig() {
        CustomScorer();
        NoOutput();
    }

    void Constraints() {
        CONS(5 <= N && N <= 500);
        CONS(1 <= P && P <= N*N);
        CONS(validClue(UP));
        CONS(validClue(DOWN));
        CONS(validClue(LEFT));
        CONS(validClue(RIGHT));
        CONS(guaranteedSolution());
    }

    void Subtask1() {
        CONS(N == 10);
        CONS(P == 4);
    }

    void Subtask2() {
        CONS(N == 10);
        CONS(P == 9);
    }

    void Subtask3() {
        CONS(N == 30);
        CONS(P == 9);
        CONS(gapBetweenClue(4));
    }

    void Subtask4() {
        CONS(N == 60);
        CONS(P == 139);
        CONS(allClue());
    }

    void Subtask5() {
        CONS(N == 100);
        CONS(P == 137);
        CONS(noB());
    }

    void Subtask6() {
        CONS(N == 150);
        CONS(P == 152);
        CONS(valNotMoreThan(9));
    }

    void Subtask7() {
        CONS(N == 250);
        CONS(P == 181);
        CONS(noRowClue());
    }

    void Subtask8() {
        CONS(N == 357);
        CONS(P == 156);
        CONS(threeModFour());
    }

    void Subtask9() {
        CONS(N == 499);
        CONS(P == 427);
        CONS(gapBetweenClue(2));
    }

    void Subtask10() {
        CONS(N == 500);
        CONS(P == 978);
    }

private:
    bool validClue(const vector<string> &A) {
        if (A.size() != N) return false;

        for (int i = 0; i < N; i++) {
            if (A[i] == "-") continue;
            if (A[i] == "0") continue;

            int len = A[i].length();
            if (A[i][len-1] != 'M' && A[i][len-1] != 'B') return false;

            if (A[i][0] < '1' || A[i][0] > '9') return false;
            int val = A[i][0] - '0';

            for (int j = 1; j < len-1; j++) {
                if (A[i][j] < '0' || A[i][j] > '9') return false;    
                val = 10 * val + A[i][j] - '0';
            }
            if (val < 1 || val > N) return false;
        }

        return true;
    }

    bool guaranteedSolution() {
        char ans[507][507];
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                ans[i][j] = ' ';
            }
        }

        // Check LEFT
        for (int i = 0; i < N; i++) {
            if (LEFT[i][0] == '-') continue;
            if (LEFT[i][0] == '0') {
                for (int j = 0; j < N; j++) {
                    if (ans[i][j] == ' ' || ans[i][j] == '#') ans[i][j] = '#';
                        else return false;
                }
            } else {
                int len = LEFT[i].length();
                int val = 0;
                for (int j = 0; j < len-1; j++) val = 10 * val + LEFT[i][j] - '0';
                for (int j = 0; j < val-1; j++) {
                    if (ans[i][j] == ' ' || ans[i][j] == '#') ans[i][j] = '#';
                        else return false;
                }
                int j = val-1;
                if (ans[i][j] == ' ' || ans[i][j] == LEFT[i][len-1]) ans[i][j] = LEFT[i][len-1];
                    else return false;
            }
        }

        // Check RIGHT
        for (int i = 0; i < N; i++) {
            if (RIGHT[i][0] == '-') continue;
            if (RIGHT[i][0] == '0') {
                for (int j = 0; j < N; j++) {
                    if (ans[i][N-1-j] == ' ' || ans[i][N-1-j] == '#') ans[i][N-1-j] = '#';
                        else return false;
                }
            } else {
                int len = RIGHT[i].length();
                int val = 0;
                for (int j = 0; j < len-1; j++) val = 10 * val + RIGHT[i][j] - '0';
                for (int j = 0; j < val-1; j++) {
                    if (ans[i][N-1-j] == ' ' || ans[i][N-1-j] == '#') ans[i][N-1-j] = '#';
                        else return false;
                }
                int j = val-1;
                if (ans[i][N-1-j] == ' ' || ans[i][N-1-j] == RIGHT[i][len-1]) ans[i][N-1-j] = RIGHT[i][len-1];
                    else return false;
            }
        }

        // Check UP
        for (int i = 0; i < N; i++) {
            if (UP[i][0] == '-') continue;
            if (UP[i][0] == '0') {
                for (int j = 0; j < N; j++) {
                    if (ans[j][i] == ' ' || ans[j][i] == '#') ans[j][i] = '#';
                        else return false;
                }
            } else {
                int len = UP[i].length();
                int val = 0;
                for (int j = 0; j < len-1; j++) val = 10 * val + UP[i][j] - '0';
                for (int j = 0; j < val-1; j++) {
                    if (ans[j][i] == ' ' || ans[j][i] == '#') ans[j][i] = '#';
                        else return false;
                }
                int j = val-1;
                if (ans[j][i] == ' ' || ans[j][i] == UP[i][len-1]) ans[j][i] = UP[i][len-1];
                    else return false;
            }
        }

        // Check DOWN
        for (int i = 0; i < N; i++) {
            if (DOWN[i][0] == '-') continue;
            if (DOWN[i][0] == '0') {
                for (int j = 0; j < N; j++) {
                    if (ans[N-1-j][i] == ' ' || ans[N-1-j][i] == '#') ans[N-1-j][i] = '#';
                        else return false;
                }
            } else {
                int len = DOWN[i].length();
                int val = 0;
                for (int j = 0; j < len-1; j++) val = 10 * val + DOWN[i][j] - '0';
                for (int j = 0; j < val-1; j++) {
                    if (ans[N-1-j][i] == ' ' || ans[N-1-j][i] == '#') ans[N-1-j][i] = '#';
                        else return false;
                }
                int j = val-1;
                if (ans[N-1-j][i] == ' ' || ans[N-1-j][i] == DOWN[i][len-1]) ans[N-1-j][i] = DOWN[i][len-1];
                    else return false;
            }
        }

        // Print board
        // printf("\n\n");
        // for (int i = 0; i < N; i++) {
        //     for (int j = 0; j < N; j++) {
        //         printf("%c", ans[i][j]);
        //     }
        //     printf("\n");
        // }
        // printf("\n\n");

        return true;
    }

    bool gapBetweenClue(int gaps) {
        vector<string> tmp;
        for (int i = 0; i < N; i++) tmp.push_back(UP[i]);
        for (int i = 0; i < N; i++) tmp.push_back(RIGHT[i]);
        for (int i = 0; i < N; i++) tmp.push_back(DOWN[N-1-i]);
        for (int i = 0; i < N; i++) tmp.push_back(LEFT[N-1-i]);
        for (int i = 0; i < gaps; i++) tmp.push_back(UP[i]);

        for (int i = 0; i < 4*N; i++) {
            if (tmp[i] != "-") {
                for (int j = 1; j <= gaps; j++) {
                    if (tmp[i+j] != "-") return false;
                }
            }
        }

        return true;
    }

    bool allClue() {
        for (int i = 0; i < N; i++) {
            if (LEFT[i] == "-" || RIGHT[i] == "-" || UP[i] == "-" || DOWN[i] == "-") return false;
        }
        return true;
    }

    bool noB() {
        for (int i = 0; i < N; i++) {
            int len = LEFT[i].length();
            if (LEFT[i][len-1] == 'B') return false;

            len = RIGHT[i].length();
            if (RIGHT[i][len-1] == 'B') return false;
            
            len = UP[i].length();
            if (UP[i][len-1] == 'B') return false;
            
            len = DOWN[i].length();
            if (DOWN[i][len-1] == 'B') return false;
        }
        return true;
    }

    bool valNotMoreThan(int maxVal) {
        for (int i = 0; i < N; i++) {
            int len = LEFT[i].length();
            if (LEFT[i][len-1] == 'M' || LEFT[i][len-1] == 'B') {
                int val = 0;
                for (int j = 0; j < len-1; j++) val = 10 * val + LEFT[i][j] - '0';
                if (val > maxVal) return false;
            }

            len = RIGHT[i].length();
            if (RIGHT[i][len-1] == 'M' || RIGHT[i][len-1] == 'B') {
                int val = 0;
                for (int j = 0; j < len-1; j++) val = 10 * val + RIGHT[i][j] - '0';
                if (val > maxVal) return false;
            }

            len = UP[i].length();
            if (UP[i][len-1] == 'M' || UP[i][len-1] == 'B') {
                int val = 0;
                for (int j = 0; j < len-1; j++) val = 10 * val + UP[i][j] - '0';
                if (val > maxVal) return false;
            }

            len = DOWN[i].length();
            if (DOWN[i][len-1] == 'M' || DOWN[i][len-1] == 'B') {
                int val = 0;
                for (int j = 0; j < len-1; j++) val = 10 * val + DOWN[i][j] - '0';
                if (val > maxVal) return false;
            }
        }
        return true;
    }

    bool noRowClue() {
        for (int i = 0; i < N; i++) {
            if (LEFT[i] != "-" || RIGHT[i] != "-") return false;
        }
        return true;
    }

    bool threeModFour() {
        for (int i = 0; i < N; i++) {
            int len = LEFT[i].length();
            if (LEFT[i][len-1] == 'M' || LEFT[i][len-1] == 'B') {
                int val = 0;
                for (int j = 0; j < len-1; j++) val = 10 * val + LEFT[i][j] - '0';
                if (val % 4 != 3 || (i + 1) % 4 != 3) return false;
            }

            len = RIGHT[i].length();
            if (RIGHT[i][len-1] == 'M' || RIGHT[i][len-1] == 'B') {
                int val = 0;
                for (int j = 0; j < len-1; j++) val = 10 * val + RIGHT[i][j] - '0';
                if (val % 4 != 3 || (i + 1) % 4 != 3) return false;
            }

            len = UP[i].length();
            if (UP[i][len-1] == 'M' || UP[i][len-1] == 'B') {
                int val = 0;
                for (int j = 0; j < len-1; j++) val = 10 * val + UP[i][j] - '0';
                if (val % 4 != 3 || (i + 1) % 4 != 3) return false;
            }

            len = DOWN[i].length();
            if (DOWN[i][len-1] == 'M' || DOWN[i][len-1] == 'B') {
                int val = 0;
                for (int j = 0; j < len-1; j++) val = 10 * val + DOWN[i][j] - '0';
                if (val % 4 != 3 || (i + 1) % 4 != 3) return false;
            }
        }
        return true;
    }
};

class TestSpec : public BaseTestSpec<ProblemSpec> {
protected:
    void SampleTestCase1() {
        Input({ "5 3",
                "1M - - - -",
                "- -",
                "1B 3B",
                "0 -",
                "- -",
                "5M 1M",
                "4B - 2M - -"});
    }

    void TestGroup1() {
        Subtasks({1});

        CASE(N = 10, P = 4,
            UP = {"-", "1M", "-", "-", "-", "-", "2B", "-", "-", "-"},
            LEFT = {"-", "4M", "-", "-", "-", "-", "-", "-", "4M", "-"},
            RIGHT = {"-", "1B", "-", "8B", "-", "3B", "-", "-", "5M", "-"},
            DOWN = {"5M", "-", "3B", "-", "-", "-", "-", "3M", "-", "-"});
    }

    void TestGroup2() {
        Subtasks({2});

        CASE(N = 10, P = 9,
            UP = {"-", "1B", "-", "1B", "3M", "4M", "-", "5B", "-", "2M"},
            LEFT = {"-", "-", "1B", "2M", "2M", "7B", "-", "2M", "-", "6M"},
            RIGHT = {"4M", "-", "-", "1B", "-", "-", "-", "9M", "-", "3M"},
            DOWN = {"8B", "-", "9M", "-", "4M", "-", "-", "1M", "0", "4M"});
    }

    void TestGroup3() {
        Subtasks({3});

        CASE(N = 30, P = 9,
            UP = {"-", "-", "5M", "-", "-", "-", "-", "27B", "-", "-", "-", "-", "9B", "-", "-", "-", "-", "-", "24B", "-", "-", "-", "-", "-", "15M", "-", "-", "-", "-", "-"},
            LEFT = {"-", "-", "17B", "-", "-", "-", "-", "-", "-", "16B", "-", "-", "-", "-", "25M", "-", "-", "-", "-", "-", "-", "0", "-", "-", "-", "-", "4B", "-", "-", "-"},
            RIGHT = {"-", "13M", "-", "-", "-", "-", "-", "9M", "-", "-", "-", "-", "17M", "-", "-", "-", "-", "1M", "-", "-", "-", "-", "-", "-", "-", "25M", "-", "-", "-", "-"},
            DOWN = {"-", "7M", "-", "-", "-", "-", "3B", "-", "-", "-", "-", "0", "-", "-", "-", "-", "8M", "-", "-", "-", "-", "-", "7M", "-", "-", "-", "-", "7B", "-", "-"});
    }

    void TestGroup4() {
        Subtasks({4});

        CASE(N = 60, P = 139,
            UP = {"3M", "3B", "13B", "4B", "4M", "2B", "6M", "2M", "3M", "6M", "2M", "4M", "50M", "5B", "18B", "12B", "4B", "6B", "46B", "3M", "40M", "19B", "14M", "9B", "2B", "2M", "6M", "1B", "9M", "1M", "20B", "14B", "1M", "7M", "47B", "59B", "5M", "7B", "5B", "1B", "13B", "31M", "32M", "3M", "9M", "3M", "3B", "2M", "22B", "3B", "2M", "3M", "2M", "1B", "1B", "9B", "3B", "12B", "3B", "3M"},
            LEFT = {"28B", "6B", "1M", "2B", "2M", "1M", "33B", "2M", "4B", "4B", "10B", "11M", "1M", "5B", "59M", "10M", "3M", "1M", "4M", "1B", "9M", "9M", "3B", "1M", "7M", "6M", "6M", "10M", "2B", "7B", "16B", "16M", "3M", "22B", "1B", "2M", "3M", "4M", "7B", "4B", "8M", "1B", "2B", "2B", "1B", "11B", "25M", "3M", "1B", "6M", "1B", "11B", "7B", "17M", "2B", "8B", "1B", "28B", "1B", "19M"},
            RIGHT = {"6B", "7B", "1M", "44B", "4B", "17B", "9M", "8M", "1M", "4M", "1B", "2M", "15B", "24M", "1B", "2M", "2B", "9M", "13M", "14M", "9M", "3B", "14B", "20B", "12B", "28B", "4M", "15M", "57M", "22B", "8B", "18M", "28M", "13M", "1M", "4M", "4M", "35M", "5B", "11B", "5M", "22B", "4M", "4B", "2M", "10B", "1B", "4B", "13B", "48M", "14M", "15M", "4B", "7M", "10M", "1M", "6M", "7B", "2M", "5M"},
            DOWN = {"2B", "2B", "6M", "2M", "18M", "6M", "6B", "4B", "12M", "12B", "8B", "15B", "11M", "10B", "5B", "10M", "2B", "37B", "1M", "31M", "16M", "15B", "26M", "1M", "2B", "1B", "14M", "1M", "3M", "3M", "4M", "1M", "17B", "4B", "13M", "2B", "47M", "3M", "19B", "1B", "2M", "4B", "4M", "38B", "2B", "3M", "3B", "6B", "21M", "7B", "5B", "3B", "16M", "1M", "4M", "1M", "2B", "26B", "2M", "5M"});
    }

    void TestGroup5() {
        Subtasks({5});

        CASE(N = 100, P = 137,
            UP = {"7M", "3M", "6M", "4M", "-", "13M", "23M", "9M", "2M", "4M", "21M", "-", "1M", "47M", "6M", "-", "74M", "5M", "1M", "45M", "6M", "13M", "70M", "-", "-", "-", "17M", "4M", "6M", "1M", "7M", "5M", "2M", "1M", "6M", "9M", "29M", "-", "-", "-", "21M", "2M", "4M", "25M", "-", "-", "-", "34M", "-", "1M", "50M", "4M", "1M", "-", "49M", "32M", "14M", "-", "57M", "65M", "13M", "5M", "10M", "-", "37M", "-", "3M", "-", "1M", "33M", "33M", "50M", "10M", "-", "50M", "-", "33M", "6M", "57M", "12M", "9M", "1M", "27M", "9M", "6M", "-", "16M", "15M", "-", "-", "1M", "9M", "22M", "-", "-", "2M", "-", "-", "-", "10M"},
            LEFT = {"13M", "-", "-", "2M", "13M", "2M", "1M", "-", "-", "5M", "-", "12M", "-", "49M", "6M", "12M", "1M", "2M", "9M", "57M", "2M", "-", "4M", "3M", "26M", "66M", "32M", "49M", "-", "5M", "28M", "49M", "8M", "-", "1M", "4M", "-", "24M", "37M", "6M", "-", "-", "11M", "8M", "-", "-", "-", "42M", "3M", "26M", "2M", "-", "9M", "7M", "66M", "-", "1M", "18M", "6M", "38M", "-", "36M", "65M", "46M", "1M", "3M", "-", "1M", "63M", "12M", "-", "-", "24M", "17M", "-", "58M", "2M", "7M", "5M", "34M", "6M", "41M", "1M", "50M", "-", "68M", "5M", "-", "5M", "31M", "13M", "11M", "48M", "3M", "21M", "4M", "-", "52M", "6M", "7M"},
            RIGHT = {"6M", "-", "10M", "6M", "-", "-", "23M", "-", "-", "-", "-", "1M", "-", "4M", "-", "4M", "40M", "-", "76M", "14M", "60M", "4M", "14M", "-", "10M", "-", "-", "28M", "55M", "54M", "14M", "-", "18M", "31M", "3M", "1M", "7M", "8M", "-", "12M", "31M", "40M", "14M", "-", "8M", "17M", "1M", "43M", "35M", "3M", "98M", "12M", "-", "-", "-", "1M", "22M", "5M", "2M", "-", "47M", "-", "6M", "7M", "1M", "-", "3M", "-", "1M", "-", "74M", "9M", "1M", "-", "6M", "-", "33M", "19M", "-", "15M", "1M", "32M", "-", "41M", "14M", "30M", "7M", "-", "5M", "6M", "5M", "-", "-", "-", "54M", "1M", "5M", "39M", "1M", "1M"},
            DOWN = {"-", "-", "7M", "4M", "5M", "2M", "-", "-", "2M", "-", "-", "-", "10M", "34M", "1M", "54M", "-", "26M", "42M", "56M", "-", "-", "-", "-", "59M", "14M", "22M", "34M", "95M", "-", "4M", "58M", "10M", "1M", "-", "-", "-", "-", "72M", "-", "-", "2M", "11M", "31M", "1M", "29M", "-", "5M", "14M", "5M", "10M", "1M", "-", "-", "22M", "8M", "3M", "25M", "11M", "-", "25M", "3M", "-", "-", "13M", "-", "-", "1M", "-", "39M", "9M", "4M", "11M", "8M", "2M", "7M", "21M", "16M", "5M", "89M", "47M", "1M", "27M", "9M", "-", "-", "14M", "-", "11M", "97M", "41M", "-", "2M", "-", "-", "1M", "9M", "25M", "28M", "1M"});
    }

    void TestGroup6() {
        Subtasks({6});

        CASE(N = 150, P = 152,
            UP = {"7M", "3M", "2M", "2M", "3B", "1M", "5B", "3M", "3B", "2B", "3M", "-", "5B", "6B", "4M", "9M", "5M", "6M", "2B", "4B", "9M", "-", "1M", "-", "6B", "3M", "4B", "1M", "3M", "2M", "6M", "0", "0", "1B", "0", "-", "9B", "3M", "8B", "2M", "-", "6M", "6M", "0", "1B", "2B", "7M", "0", "4M", "-", "8M", "3M", "5M", "5M", "-", "8M", "-", "8B", "8M", "0", "7B", "3B", "1M", "3M", "8M", "9M", "9B", "9B", "1M", "1M", "6M", "6M", "3M", "3M", "9B", "6M", "9M", "6M", "6M", "-", "4M", "7M", "5B", "9B", "2M", "2B", "-", "8B", "-", "5M", "5B", "-", "5M", "2M", "8B", "8B", "1M", "8M", "4M", "1B", "7M", "7M", "9M", "6M", "4B", "9M", "3M", "-", "1B", "-", "6M", "1M", "0", "9B", "-", "8M", "2B", "6M", "-", "0", "5B", "2M", "4M", "6B", "2B", "5M", "2M", "5B", "1B", "5M", "6M", "2B", "0", "-", "-", "2B", "1M", "-", "7M", "1M", "0", "3B", "6B", "3B", "1B", "6M", "6B", "1B", "9B", "-"},
            LEFT = {"6M", "3M", "2M", "5M", "2B", "8M", "1M", "1M", "1M", "4M", "-", "4M", "-", "9M", "9M", "5B", "6M", "-", "1M", "1M", "3M", "-", "4M", "5B", "1B", "1M", "4M", "7B", "1M", "-", "8B", "7B", "1M", "-", "2M", "2B", "3M", "6B", "9B", "-", "5M", "0", "8B", "1B", "1M", "2B", "8B", "4M", "-", "8M", "1M", "5M", "4M", "-", "0", "4B", "4M", "6M", "6M", "7B", "8M", "7B", "-", "6B", "0", "0", "9M", "9B", "8B", "1B", "2B", "2M", "7M", "1M", "1M", "4M", "5M", "4B", "6M", "8M", "8B", "8M", "8M", "8M", "1B", "4M", "0", "3B", "-", "3M", "0", "4M", "4B", "4M", "2M", "5M", "8M", "-", "6M", "2M", "4M", "6M", "6M", "8B", "-", "2M", "1M", "-", "1M", "8M", "9B", "8M", "4M", "6B", "3B", "2M", "3M", "9M", "-", "5B", "1B", "3M", "7B", "-", "1B", "4B", "9M", "3M", "1M", "7B", "9M", "7M", "3B", "7M", "3M", "-", "-", "4B", "3M", "7M", "6M", "1M", "1M", "4M", "7M", "2M", "1M", "9M", "6M", "1M"},
            RIGHT = {"-", "3M", "1B", "9M", "-", "4B", "4M", "3M", "1M", "-", "2M", "3M", "5M", "6M", "1M", "7B", "5M", "-", "3M", "5B", "9M", "8B", "7M", "5B", "-", "7M", "-", "4B", "2M", "6M", "8B", "9B", "3M", "9B", "8B", "8B", "4B", "5B", "-", "8M", "6M", "0", "2B", "2B", "7M", "8M", "8M", "-", "7B", "4B", "9M", "8M", "1B", "9M", "-", "7B", "-", "4M", "3M", "5M", "2B", "-", "8M", "1M", "-", "0", "1M", "7M", "-", "9B", "5B", "2B", "-", "2M", "4B", "-", "3M", "5M", "2M", "4M", "6B", "-", "7B", "8B", "7B", "-", "-", "9M", "4M", "-", "0", "4M", "4M", "5M", "2M", "4M", "-", "9B", "6B", "4M", "9M", "9M", "4M", "2M", "3M", "2B", "1M", "-", "7B", "9M", "6B", "2B", "5B", "9B", "4M", "7M", "9M", "5B", "5M", "-", "5M", "4B", "1M", "1B", "7B", "9M", "2M", "8M", "6B", "3M", "3B", "-", "1M", "4M", "7M", "8B", "-", "6M", "3M", "-", "-", "5M", "3M", "3M", "7B", "5M", "3M", "-", "8B", "9M"},
            DOWN = {"1M", "-", "5B", "4B", "9B", "1M", "-", "9M", "2B", "7M", "2M", "0", "9M", "6M", "5B", "6B", "3B", "4M", "5M", "8M", "2M", "4B", "1B", "8B", "5B", "-", "1B", "3B", "9B", "9M", "8M", "0", "-", "-", "0", "1B", "-", "-", "5M", "-", "8M", "-", "4B", "0", "3B", "3M", "8B", "0", "7M", "8M", "6M", "7B", "1M", "6B", "0", "6B", "-", "8M", "8B", "0", "9B", "7M", "-", "8M", "8M", "8M", "4B", "3M", "9M", "2B", "3M", "-", "5B", "7M", "5M", "1M", "2B", "3M", "4M", "-", "3B", "2M", "1B", "3M", "9M", "9M", "-", "5M", "9B", "1B", "3M", "3M", "6B", "4B", "4B", "4M", "3M", "2M", "6M", "2B", "2B", "7M", "8M", "2M", "1M", "8B", "5B", "6M", "1M", "4M", "5M", "7M", "-", "7M", "7M", "7B", "-", "2M", "9M", "0", "6M", "-", "6M", "-", "-", "3M", "1M", "1M", "-", "9M", "6M", "-", "0", "1B", "4M", "-", "6M", "-", "9B", "2M", "0", "1M", "2B", "3M", "5M", "3M", "7M", "3M", "-", "3B"});
    }

    void TestGroup7() {
        Subtasks({7});

        CASE(N = 250, P = 181,
            UP = {"23B", "94M", "22M", "-", "-", "109B", "61M", "72B", "-", "148B", "28M", "-", "63B", "92M", "1B", "220M", "58B", "85M", "-", "236B", "47B", "-", "-", "92M", "-", "152B", "193B", "173B", "-", "91B", "172B", "178B", "-", "6M", "-", "29B", "-", "84B", "174M", "167B", "132B", "-", "-", "68M", "106B", "0", "213M", "0", "98B", "217M", "-", "47B", "-", "56B", "79M", "48B", "34B", "177B", "62B", "172M", "94M", "201M", "-", "-", "-", "44M", "-", "115M", "-", "-", "-", "8M", "223B", "16M", "-", "167M", "-", "164B", "119M", "1M", "0", "32M", "101M", "-", "27M", "157M", "42B", "218M", "141B", "119M", "23M", "-", "1B", "76B", "75B", "178B", "85M", "0", "113B", "13B", "215M", "56M", "220B", "225B", "2M", "132B", "-", "-", "111M", "96B", "13M", "175B", "0", "233M", "103B", "77B", "9B", "-", "-", "-", "-", "170M", "29B", "194B", "132B", "25B", "93B", "52B", "217B", "47B", "-", "7M", "3B", "0", "0", "181M", "-", "-", "-", "68M", "17M", "152M", "-", "127B", "62B", "148B", "156M", "160B", "179B", "-", "16M", "15M", "-", "73M", "89B", "103M", "87B", "98B", "-", "-", "81M", "229M", "141B", "200M", "-", "172B", "-", "143B", "-", "-", "30M", "27M", "-", "0", "164M", "42M", "-", "29M", "143M", "11M", "-", "-", "112B", "-", "0", "164B", "42B", "-", "29B", "143B", "11B", "-", "-", "112M", "-", "125M", "72B", "-", "-", "183B", "220B", "-", "173B", "-", "240B", "-", "-", "-", "142B", "156B", "14B", "176M", "0", "-", "215M", "49B", "195M", "-", "142B", "0", "127M", "55M", "106B", "14M", "12M", "149M", "-", "242B", "122B", "100B", "224M", "-", "41B", "89M", "11M", "247B", "88M", "102B", "0", "196M", "204B", "155M", "-", "53M", "34M", "-", "186B", "-", "75M", "75B"},
            LEFT = {},
            RIGHT = {"-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"},
            DOWN = {"215B", "10M", "223M", "220M", "84B", "102M", "-", "158B", "180B", "-", "172B", "169B", "43M", "-", "180B", "14B", "193B", "3M", "182B", "8M", "63B", "50B", "171M", "156M", "-", "98M", "19M", "-", "100M", "155B", "24B", "-", "213M", "92B", "146B", "-", "96M", "36B", "26B", "15M", "58B", "163M", "177M", "1B", "107M", "0", "8B", "-", "7B", "-", "59M", "154M", "21B", "-", "-", "110M", "174M", "74B", "189B", "-", "-", "-", "140M", "-", "243M", "-", "165B", "-", "225M", "29M", "115M", "242B", "20B", "-", "0", "-", "-", "-", "20B", "250M", "0", "147M", "150M", "-", "156B", "84M", "192M", "6B", "22B", "101B", "228M", "-", "245M", "-", "145M", "-", "82M", "-", "138B", "233M", "-", "74M", "31B", "22M", "-", "-", "98M", "150B", "-", "111M", "221B", "56M", "-", "18M", "37B", "174B", "218M", "64M", "45B", "55B", "9B", "39B", "222B", "-", "47B", "-", "128M", "167M", "34B", "39B", "227M", "-", "-", "-", "-", "26M", "-", "127M", "57M", "165M", "234M", "71B", "123B", "118M", "166M", "-", "31M", "-", "72B", "78M", "-", "-", "239B", "-", "162B", "-", "-", "73B", "86B", "246M", "149B", "22M", "1B", "51M", "220M", "79B", "-", "-", "185M", "109B", "73M", "224M", "1B", "0", "12B", "-", "198B", "-", "-", "-", "201B", "36B", "89B", "0", "0", "12M", "-", "198M", "-", "-", "-", "201M", "36M", "89M", "0", "-", "179B", "161M", "-", "-", "11B", "-", "-", "124B", "-", "-", "191M", "36M", "-", "-", "162M", "49B", "-", "208B", "35B", "46M", "-", "-", "-", "0", "-", "157B", "-", "221B", "-", "102M", "229B", "1B", "129B", "16B", "-", "179B", "190B", "26B", "24B", "4B", "26M", "10M", "-", "25B", "47B", "46B", "250B", "187M", "-", "156M", "-", "135B", "-", "130B"});
    }

    void TestGroup8() {
        Subtasks({8});

        CASE(N = 357, P = 156,
            UP = {"-", "-", "7B", "-", "-", "-", "-", "-", "-", "-", "111B", "-", "-", "-", "-", "-", "-", "-", "19M", "-", "-", "-", "211M", "-", "-", "-", "99M", "-", "-", "-", "-", "-", "-", "-", "43M", "-", "-", "-", "11M", "-", "-", "-", "11M", "-", "-", "-", "27B", "-", "-", "-", "171M", "-", "-", "-", "35B", "-", "-", "-", "11M", "-", "-", "-", "-", "-", "-", "-", "251M", "-", "-", "-", "67M", "-", "-", "-", "-", "-", "-", "-", "55B", "-", "-", "-", "3B", "-", "-", "-", "3B", "-", "-", "-", "31B", "-", "-", "-", "19B", "-", "-", "-", "67B", "-", "-", "-", "119M", "-", "-", "-", "23B", "-", "-", "-", "-", "-", "-", "-", "59B", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "7M", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "27B", "-", "-", "-", "31M", "-", "-", "-", "147M", "-", "-", "-", "7B", "-", "-", "-", "23B", "-", "-", "-", "195M", "-", "-", "-", "-", "-", "-", "-", "19B", "-", "-", "-", "283M", "-", "-", "-", "55M", "-", "-", "-", "7B", "-", "-", "-", "91B", "-", "-", "-", "7M", "-", "-", "-", "55B", "-", "-", "-", "23B", "-", "-", "-", "-", "-", "-", "-", "139M", "-", "-", "-", "7M", "-", "-", "-", "7M", "-", "-", "-", "-", "-", "-", "-", "19B", "-", "-", "-", "31M", "-", "-", "-", "7B", "-", "-", "-", "3M", "-", "-", "-", "83B", "-", "-", "-", "-", "-", "-", "-", "3B", "-", "-", "-", "87B", "-", "-", "-", "3B", "-", "-", "-", "11B", "-", "-", "-", "-", "-", "-", "-", "3B", "-", "-", "-", "11B", "-", "-", "-", "35M", "-", "-", "-", "59M", "-", "-", "-", "3M", "-", "-", "-", "3M", "-", "-", "-", "43M", "-", "-", "-", "31M", "-", "-", "-", "3M", "-", "-", "-", "11M", "-", "-", "-", "-", "-", "-", "-", "23M", "-", "-", "-", "39M", "-", "-", "-", "-", "-", "-", "-", "43B", "-", "-", "-", "-", "-", "-", "-", "183B", "-", "-", "-", "-", "-", "-", "-", "67M", "-", "-", "-", "11M", "-", "-", "-", "11M", "-", "-", "-", "15B", "-", "-", "-", "11B", "-", "-", "-", "243M", "-", "-"},
            LEFT = {"-", "-", "75M", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "87M", "-", "-", "-", "-", "-", "-", "-", "63M", "-", "-", "-", "-", "-", "-", "-", "31M", "-", "-", "-", "15M", "-", "-", "-", "107B", "-", "-", "-", "15B", "-", "-", "-", "7B", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "59M", "-", "-", "-", "-", "-", "-", "-", "115B", "-", "-", "-", "-", "-", "-", "-", "63B", "-", "-", "-", "-", "-", "-", "-", "223M", "-", "-", "-", "15B", "-", "-", "-", "19M", "-", "-", "-", "-", "-", "-", "-", "7M", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "75M", "-", "-", "-", "63M", "-", "-", "-", "75M", "-", "-", "-", "3M", "-", "-", "-", "127M", "-", "-", "-", "-", "-", "-", "-", "3B", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "3B", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "27B", "-", "-", "-", "43B", "-", "-", "-", "47B", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "71M", "-", "-", "-", "-", "-", "-", "-", "71M", "-", "-", "-", "47M", "-", "-", "-", "283M", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "15B", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "15M", "-", "-", "-", "51B", "-", "-", "-", "27B", "-", "-", "-", "87B", "-", "-", "-", "-", "-", "-", "-", "119B", "-", "-", "-", "263B", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "15M", "-", "-", "-", "147M", "-", "-", "-", "239B", "-", "-", "-", "15M", "-", "-", "-", "7B", "-", "-", "-", "-", "-", "-", "-", "7M", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "3M", "-", "-", "-", "19M", "-", "-", "-", "7B", "-", "-", "-", "7B", "-", "-", "-", "-", "-", "-", "-", "0", "-", "-", "-", "139M", "-", "-", "-", "3B", "-", "-", "-", "3M", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "327B", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "95B", "-", "-", "-", "51B", "-", "-"},
            RIGHT = {"-", "-", "63M", "-", "-", "-", "75B", "-", "-", "-", "7B", "-", "-", "-", "-", "-", "-", "-", "43B", "-", "-", "-", "-", "-", "-", "-", "19M", "-", "-", "-", "59B", "-", "-", "-", "55B", "-", "-", "-", "-", "-", "-", "-", "15B", "-", "-", "-", "59B", "-", "-", "-", "35B", "-", "-", "-", "-", "-", "-", "-", "27M", "-", "-", "-", "283B", "-", "-", "-", "23M", "-", "-", "-", "7M", "-", "-", "-", "79M", "-", "-", "-", "99B", "-", "-", "-", "67B", "-", "-", "-", "103B", "-", "-", "-", "71M", "-", "-", "-", "11B", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "107B", "-", "-", "-", "63B", "-", "-", "-", "119M", "-", "-", "-", "43M", "-", "-", "-", "-", "-", "-", "-", "39B", "-", "-", "-", "127M", "-", "-", "-", "35M", "-", "-", "-", "-", "-", "-", "-", "259M", "-", "-", "-", "59B", "-", "-", "-", "87B", "-", "-", "-", "327M", "-", "-", "-", "135M", "-", "-", "-", "7M", "-", "-", "-", "-", "-", "-", "-", "51B", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "23B", "-", "-", "-", "-", "-", "-", "-", "43B", "-", "-", "-", "199M", "-", "-", "-", "23B", "-", "-", "-", "-", "-", "-", "-", "71M", "-", "-", "-", "219B", "-", "-", "-", "195B", "-", "-", "-", "111B", "-", "-", "-", "15M", "-", "-", "-", "11B", "-", "-", "-", "39B", "-", "-", "-", "7B", "-", "-", "-", "35M", "-", "-", "-", "3M", "-", "-", "-", "59M", "-", "-", "-", "263M", "-", "-", "-", "207M", "-", "-", "-", "15B", "-", "-", "-", "-", "-", "-", "-", "3M", "-", "-", "-", "51M", "-", "-", "-", "203B", "-", "-", "-", "7B", "-", "-", "-", "-", "-", "-", "-", "3B", "-", "-", "-", "307B", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "15B", "-", "-", "-", "3B", "-", "-", "-", "43B", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "43M", "-", "-", "-", "-", "-", "-", "-", "287M", "-", "-", "-", "-", "-", "-", "-", "3M", "-", "-", "-", "3M", "-", "-", "-", "-", "-", "-", "-", "103M", "-", "-", "-", "-", "-", "-"},
            DOWN = {"-", "-", "27B", "-", "-", "-", "31M", "-", "-", "-", "23M", "-", "-", "-", "11M", "-", "-", "-", "51M", "-", "-", "-", "27B", "-", "-", "-", "119M", "-", "-", "-", "87M", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "71B", "-", "-", "-", "-", "-", "-", "-", "3B", "-", "-", "-", "-", "-", "-", "-", "255M", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "3B", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "235B", "-", "-", "-", "63M", "-", "-", "-", "31M", "-", "-", "-", "-", "-", "-", "-", "163M", "-", "-", "-", "-", "-", "-", "-", "3M", "-", "-", "-", "87M", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "3M", "-", "-", "-", "47M", "-", "-", "-", "139B", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "59B", "-", "-", "-", "95M", "-", "-", "-", "-", "-", "-", "-", "3M", "-", "-", "-", "3B", "-", "-", "-", "-", "-", "-", "-", "287B", "-", "-", "-", "11M", "-", "-", "-", "11B", "-", "-", "-", "303M", "-", "-", "-", "227M", "-", "-", "-", "-", "-", "-", "-", "235B", "-", "-", "-", "-", "-", "-", "-", "7M", "-", "-", "-", "131M", "-", "-", "-", "119B", "-", "-", "-", "47M", "-", "-", "-", "-", "-", "-", "-", "3M", "-", "-", "-", "31B", "-", "-", "-", "3M", "-", "-", "-", "23B", "-", "-", "-", "-", "-", "-", "-", "79B", "-", "-", "-", "303B", "-", "-", "-", "115B", "-", "-", "-", "-", "-", "-", "-", "3B", "-", "-", "-", "59B", "-", "-", "-", "-", "-", "-", "-", "11M", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "55M", "-", "-", "-", "119M", "-", "-", "-", "247M", "-", "-", "-", "135B", "-", "-", "-", "3B", "-", "-", "-", "-", "-", "-", "-", "31M", "-", "-", "-", "51M", "-", "-", "-", "35M", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "131M", "-", "-", "-", "23M", "-", "-", "-", "-", "-", "-", "-", "39B", "-", "-", "-", "-", "-", "-", "-", "15M", "-", "-", "-", "11B", "-", "-"});
    }

    void TestGroup9() {
        Subtasks({9});

        CASE(N = 499, P = 427,
            UP = {"-", "-", "-", "329M", "-", "-", "39M", "-", "-", "-", "170M", "-", "-", "-", "308B", "-", "-", "363M", "-", "-", "-", "-", "0", "-", "-", "5B", "-", "-", "53M", "-", "-", "377B", "-", "-", "51M", "-", "-", "335M", "-", "-", "156B", "-", "-", "-", "274B", "-", "-", "294B", "-", "-", "-", "-", "95M", "-", "-", "-", "-", "106M", "-", "-", "-", "-", "38M", "-", "-", "11B", "-", "-", "35B", "-", "-", "54B", "-", "-", "-", "410M", "-", "-", "-", "-", "168B", "-", "-", "-", "-", "-", "496B", "-", "-", "377M", "-", "-", "236M", "-", "-", "-", "256M", "-", "-", "-", "81M", "-", "-", "-", "-", "-", "344B", "-", "-", "115M", "-", "-", "17B", "-", "-", "158B", "-", "-", "442B", "-", "-", "38M", "-", "-", "-", "141M", "-", "-", "495M", "-", "-", "-", "-", "175M", "-", "-", "-", "-", "86M", "-", "-", "-", "-", "208M", "-", "-", "1B", "-", "-", "496M", "-", "-", "249B", "-", "-", "222M", "-", "-", "-", "242M", "-", "-", "-", "238M", "-", "-", "-", "144B", "-", "-", "199B", "-", "-", "22B", "-", "-", "225M", "-", "-", "38B", "-", "-", "-", "93M", "-", "-", "-", "-", "-", "163B", "-", "-", "-", "-", "73M", "-", "-", "204B", "-", "-", "-", "-", "-", "93M", "-", "-", "-", "96M", "-", "-", "-", "-", "127M", "-", "-", "-", "67M", "-", "-", "182B", "-", "-", "147B", "-", "-", "-", "-", "70B", "-", "-", "139B", "-", "-", "85B", "-", "-", "-", "-", "124M", "-", "-", "160B", "-", "-", "-", "-", "-", "101B", "-", "-", "-", "-", "-", "22B", "-", "-", "127B", "-", "-", "107M", "-", "-", "103M", "-", "-", "-", "64M", "-", "-", "-", "61M", "-", "-", "174B", "-", "-", "-", "119B", "-", "-", "181M", "-", "-", "184B", "-", "-", "68M", "-", "-", "-", "-", "44B", "-", "-", "-", "-", "-", "-", "157M", "-", "-", "14M", "-", "-", "15B", "-", "-", "10B", "-", "-", "-", "-", "-", "45M", "-", "-", "-", "167B", "-", "-", "120B", "-", "-", "140B", "-", "-", "33M", "-", "-", "193M", "-", "-", "-", "65M", "-", "-", "-", "154B", "-", "-", "-", "151M", "-", "-", "-", "-", "134B", "-", "-", "91M", "-", "-", "61M", "-", "-", "-", "213M", "-", "-", "-", "-", "-", "-", "228M", "-", "-", "-", "-", "-", "-", "436M", "-", "-", "-", "-", "-", "161M", "-", "-", "-", "-", "492B", "-", "-", "375B", "-", "-", "-", "-", "78M", "-", "-", "225M", "-", "-", "72B", "-", "-", "226M", "-", "-", "-", "-", "425B", "-", "-", "-", "-", "23B", "-", "-", "449B", "-", "-", "-", "23B", "-", "-", "-", "17B", "-", "-", "-", "-", "19B", "-", "-", "481M", "-", "-", "-", "10M", "-", "-", "96M", "-", "-", "-", "-", "168M", "-", "-", "226B", "-", "-", "-", "133M", "-", "-", "-", "200B", "-", "-", "421M", "-", "-", "476B", "-", "-", "1M", "-", "-", "58M", "-", "-", "435M", "-", "-", "-", "98M", "-", "-", "-", "-", "11B", "-", "-", "-", "-", "11B", "-", "-", "-", "-", "385M", "-", "-", "156M", "-", "-", "-", "6M", "-", "-", "42M", "-", "-", "-", "78M"},
            LEFT = {"96B", "-", "-", "206B", "-", "-", "-", "-", "0", "-", "-", "-", "429M", "-", "-", "175M", "-", "-", "425B", "-", "-", "-", "409B", "-", "-", "174M", "-", "-", "-", "86M", "-", "-", "259B", "-", "-", "-", "256M", "-", "-", "-", "290M", "-", "-", "60B", "-", "-", "434M", "-", "-", "-", "-", "25B", "-", "-", "477B", "-", "-", "-", "30M", "-", "-", "137M", "-", "-", "296M", "-", "-", "-", "0", "-", "-", "386B", "-", "-", "215M", "-", "-", "-", "-", "-", "-", "31B", "-", "-", "226B", "-", "-", "333B", "-", "-", "214B", "-", "-", "-", "39M", "-", "-", "-", "-", "-", "24B", "-", "-", "-", "176B", "-", "-", "409B", "-", "-", "-", "180B", "-", "-", "-", "191B", "-", "-", "137B", "-", "-", "307M", "-", "-", "-", "489M", "-", "-", "7B", "-", "-", "-", "-", "264M", "-", "-", "24B", "-", "-", "324B", "-", "-", "467M", "-", "-", "-", "-", "42M", "-", "-", "-", "233B", "-", "-", "247B", "-", "-", "-", "-", "10B", "-", "-", "-", "238B", "-", "-", "152M", "-", "-", "-", "-", "24B", "-", "-", "51B", "-", "-", "121M", "-", "-", "10M", "-", "-", "-", "201B", "-", "-", "-", "64M", "-", "-", "-", "138M", "-", "-", "106M", "-", "-", "25M", "-", "-", "158M", "-", "-", "-", "99B", "-", "-", "-", "-", "191B", "-", "-", "116M", "-", "-", "-", "29B", "-", "-", "-", "114B", "-", "-", "138B", "-", "-", "-", "17B", "-", "-", "2B", "-", "-", "-", "-", "-", "72B", "-", "-", "-", "-", "-", "140M", "-", "-", "17M", "-", "-", "55B", "-", "-", "153B", "-", "-", "-", "-", "155M", "-", "-", "-", "-", "72M", "-", "-", "22B", "-", "-", "164M", "-", "-", "165B", "-", "-", "88B", "-", "-", "-", "-", "35B", "-", "-", "45B", "-", "-", "-", "-", "171M", "-", "-", "-", "75M", "-", "-", "151B", "-", "-", "198M", "-", "-", "172M", "-", "-", "144B", "-", "-", "-", "-", "-", "61B", "-", "-", "213M", "-", "-", "190B", "-", "-", "9M", "-", "-", "48M", "-", "-", "-", "-", "-", "228B", "-", "-", "-", "-", "125B", "-", "-", "-", "132B", "-", "-", "226M", "-", "-", "243B", "-", "-", "211M", "-", "-", "133B", "-", "-", "-", "-", "113M", "-", "-", "17B", "-", "-", "220B", "-", "-", "-", "-", "482M", "-", "-", "22B", "-", "-", "-", "291M", "-", "-", "27B", "-", "-", "-", "41M", "-", "-", "-", "141M", "-", "-", "0", "-", "-", "278B", "-", "-", "-", "291B", "-", "-", "-", "-", "59M", "-", "-", "-", "-", "416B", "-", "-", "-", "-", "185B", "-", "-", "80B", "-", "-", "208M", "-", "-", "-", "18M", "-", "-", "328M", "-", "-", "432M", "-", "-", "479M", "-", "-", "13M", "-", "-", "-", "64M", "-", "-", "-", "-", "458M", "-", "-", "-", "-", "51B", "-", "-", "185M", "-", "-", "-", "-", "410B", "-", "-", "208B", "-", "-", "-", "-", "-", "-", "421M", "-", "-", "-", "-", "-", "454B", "-", "-", "220M", "-", "-", "19M", "-", "-", "-", "-", "-", "36B", "-", "-", "-", "-", "-", "292B", "-", "-", "-", "157M", "-", "-", "-", "106M", "-", "-", "-", "321M", "-"},
            RIGHT = {"-", "-", "-", "-", "385M", "-", "-", "367B", "-", "-", "-", "228B", "-", "-", "-", "-", "-", "51M", "-", "-", "-", "-", "18B", "-", "-", "200M", "-", "-", "200M", "-", "-", "0", "-", "-", "307M", "-", "-", "105M", "-", "-", "44B", "-", "-", "-", "-", "352M", "-", "-", "-", "-", "257B", "-", "-", "204M", "-", "-", "-", "20M", "-", "-", "94B", "-", "-", "192B", "-", "-", "-", "203B", "-", "-", "254B", "-", "-", "-", "169M", "-", "-", "-", "70M", "-", "-", "456M", "-", "-", "-", "-", "431B", "-", "-", "-", "-", "147B", "-", "-", "203M", "-", "-", "-", "262M", "-", "-", "345M", "-", "-", "-", "-", "109M", "-", "-", "353M", "-", "-", "442M", "-", "-", "47M", "-", "-", "56B", "-", "-", "-", "-", "261M", "-", "-", "106B", "-", "-", "0", "-", "-", "53M", "-", "-", "-", "406M", "-", "-", "-", "-", "401B", "-", "-", "-", "80B", "-", "-", "-", "-", "42B", "-", "-", "-", "-", "2B", "-", "-", "86M", "-", "-", "-", "5B", "-", "-", "20M", "-", "-", "-", "201B", "-", "-", "125B", "-", "-", "36B", "-", "-", "-", "-", "132B", "-", "-", "141M", "-", "-", "-", "-", "211B", "-", "-", "-", "-", "178M", "-", "-", "166M", "-", "-", "49B", "-", "-", "-", "-", "152B", "-", "-", "-", "-", "153B", "-", "-", "-", "5B", "-", "-", "-", "53B", "-", "-", "-", "153M", "-", "-", "-", "47M", "-", "-", "-", "-", "-", "-", "6M", "-", "-", "57M", "-", "-", "146B", "-", "-", "-", "137M", "-", "-", "-", "143B", "-", "-", "-", "-", "-", "77B", "-", "-", "113M", "-", "-", "-", "133B", "-", "-", "10B", "-", "-", "138M", "-", "-", "17B", "-", "-", "-", "152M", "-", "-", "174B", "-", "-", "141M", "-", "-", "-", "-", "14B", "-", "-", "-", "146B", "-", "-", "18M", "-", "-", "-", "-", "194B", "-", "-", "-", "59B", "-", "-", "-", "-", "144B", "-", "-", "41B", "-", "-", "167B", "-", "-", "212B", "-", "-", "-", "79B", "-", "-", "-", "-", "-", "38B", "-", "-", "-", "-", "183B", "-", "-", "117B", "-", "-", "28M", "-", "-", "-", "183B", "-", "-", "-", "-", "231B", "-", "-", "196B", "-", "-", "-", "-", "322B", "-", "-", "-", "218M", "-", "-", "418M", "-", "-", "-", "153M", "-", "-", "-", "133M", "-", "-", "214M", "-", "-", "40B", "-", "-", "-", "186B", "-", "-", "-", "226B", "-", "-", "-", "8M", "-", "-", "-", "-", "369M", "-", "-", "-", "287M", "-", "-", "58B", "-", "-", "-", "-", "-", "-", "123B", "-", "-", "115M", "-", "-", "-", "393B", "-", "-", "93M", "-", "-", "491B", "-", "-", "348B", "-", "-", "103M", "-", "-", "14M", "-", "-", "-", "-", "-", "339M", "-", "-", "-", "-", "284M", "-", "-", "452B", "-", "-", "-", "358M", "-", "-", "268M", "-", "-", "448B", "-", "-", "-", "-", "85M", "-", "-", "171B", "-", "-", "172B", "-", "-", "-", "-", "399B", "-", "-", "-", "-", "-", "398B", "-", "-", "15B", "-", "-", "-", "-", "96M", "-", "-", "-", "121B", "-", "-", "226M", "-", "-", "-", "-", "-", "-", "346B", "-", "-", "148B", "-", "-"},
            DOWN = {"-", "165M", "-", "-", "-", "-", "-", "-", "-", "-", "313M", "-", "-", "-", "181M", "-", "-", "68B", "-", "-", "371M", "-", "-", "143M", "-", "-", "-", "0", "-", "-", "418B", "-", "-", "27M", "-", "-", "220B", "-", "-", "319B", "-", "-", "-", "418M", "-", "-", "-", "-", "20M", "-", "-", "-", "-", "255M", "-", "-", "309B", "-", "-", "-", "143B", "-", "-", "24M", "-", "-", "127M", "-", "-", "95M", "-", "-", "41M", "-", "-", "34M", "-", "-", "-", "9M", "-", "-", "-", "65M", "-", "-", "-", "207B", "-", "-", "-", "-", "-", "161M", "-", "-", "131M", "-", "-", "456M", "-", "-", "379B", "-", "-", "-", "89B", "-", "-", "385M", "-", "-", "-", "-", "495M", "-", "-", "68B", "-", "-", "322M", "-", "-", "-", "109M", "-", "-", "447M", "-", "-", "6M", "-", "-", "281M", "-", "-", "343B", "-", "-", "-", "62M", "-", "-", "-", "173M", "-", "-", "-", "-", "-", "-", "-", "131B", "-", "-", "67B", "-", "-", "-", "-", "-", "125M", "-", "-", "196B", "-", "-", "-", "-", "-", "46B", "-", "-", "-", "-", "74M", "-", "-", "96B", "-", "-", "78B", "-", "-", "31B", "-", "-", "-", "134M", "-", "-", "126M", "-", "-", "-", "136M", "-", "-", "-", "196M", "-", "-", "-", "-", "21B", "-", "-", "7B", "-", "-", "13M", "-", "-", "-", "90B", "-", "-", "118M", "-", "-", "-", "113M", "-", "-", "59M", "-", "-", "-", "-", "53B", "-", "-", "133M", "-", "-", "78B", "-", "-", "-", "-", "67M", "-", "-", "144M", "-", "-", "138B", "-", "-", "-", "-", "43B", "-", "-", "-", "59M", "-", "-", "-", "-", "93M", "-", "-", "108B", "-", "-", "10B", "-", "-", "1M", "-", "-", "-", "5M", "-", "-", "-", "111B", "-", "-", "-", "54M", "-", "-", "44B", "-", "-", "-", "87B", "-", "-", "-", "-", "146M", "-", "-", "-", "65B", "-", "-", "-", "159M", "-", "-", "-", "177M", "-", "-", "-", "160M", "-", "-", "162B", "-", "-", "-", "129M", "-", "-", "218B", "-", "-", "-", "-", "223M", "-", "-", "39B", "-", "-", "195B", "-", "-", "107M", "-", "-", "71M", "-", "-", "-", "239M", "-", "-", "-", "-", "84B", "-", "-", "-", "229M", "-", "-", "-", "-", "-", "104M", "-", "-", "-", "-", "0", "-", "-", "-", "378M", "-", "-", "-", "-", "-", "41M", "-", "-", "379M", "-", "-", "-", "-", "16B", "-", "-", "-", "127M", "-", "-", "233B", "-", "-", "-", "420M", "-", "-", "275M", "-", "-", "378M", "-", "-", "20M", "-", "-", "0", "-", "-", "-", "439B", "-", "-", "147B", "-", "-", "51B", "-", "-", "-", "31M", "-", "-", "-", "-", "-", "434M", "-", "-", "-", "-", "-", "7M", "-", "-", "383B", "-", "-", "347M", "-", "-", "-", "-", "282M", "-", "-", "-", "-", "-", "-", "0", "-", "-", "-", "-", "245B", "-", "-", "-", "463B", "-", "-", "-", "165M", "-", "-", "176B", "-", "-", "365M", "-", "-", "30M", "-", "-", "180M", "-", "-", "-", "395B", "-", "-", "48B", "-", "-", "-", "-", "-", "406B", "-", "-", "-", "218B", "-", "-", "321M", "-", "-", "-", "-", "389B", "-", "-", "-"});
    }

    void TestGroup10() {
        Subtasks({10});

        CASE(N = 500, P = 978,
            UP = {"4B", "321B", "13M", "-", "6B", "9B", "28M", "-", "-", "16B", "-", "7B", "-", "96B", "36M", "111M", "221M", "-", "7B", "225B", "38M", "-", "-", "59M", "1B", "128B", "-", "26M", "34B", "14B", "29B", "-", "80M", "32B", "166B", "-", "-", "-", "-", "17M", "3B", "-", "-", "33M", "11B", "6M", "-", "4B", "-", "130M", "16M", "49B", "48B", "29B", "25B", "100B", "-", "-", "267M", "-", "13B", "-", "-", "-", "-", "-", "-", "69M", "13M", "32B", "10M", "-", "59B", "-", "2B", "44M", "-", "25M", "19M", "32M", "9M", "20B", "-", "-", "-", "-", "30B", "36M", "-", "64M", "38B", "-", "-", "-", "8M", "240M", "-", "417B", "51M", "21B", "31M", "2M", "2M", "8B", "31M", "87M", "21M", "9B", "27M", "43M", "103M", "-", "14M", "-", "-", "57M", "214M", "3B", "12B", "8M", "-", "22M", "38M", "2B", "15B", "-", "14M", "28B", "-", "-", "4M", "38M", "31B", "-", "9M", "13B", "239M", "50B", "51B", "-", "35B", "120B", "4M", "4B", "18B", "-", "3B", "31B", "22B", "-", "12B", "174B", "33M", "134M", "21B", "2M", "151M", "6M", "-", "1B", "-", "-", "-", "134M", "19B", "106B", "-", "2B", "85M", "-", "13M", "22M", "1B", "-", "-", "16M", "48B", "146B", "107B", "70M", "82M", "1B", "14B", "-", "1B", "80B", "2M", "-", "57M", "-", "-", "-", "39M", "94B", "18M", "10M", "55M", "-", "140B", "13B", "82M", "-", "-", "32B", "-", "34M", "31B", "15B", "26M", "39B", "-", "49B", "-", "67M", "1B", "-", "20M", "24B", "168B", "16B", "85B", "24B", "75B", "52M", "88M", "80B", "3B", "86B", "4M", "5M", "18M", "14M", "4M", "25B", "43M", "13B", "4B", "48B", "5B", "42B", "34M", "2M", "3M", "-", "-", "-", "46B", "40B", "53M", "-", "-", "3B", "21M", "-", "90B", "-", "208B", "34B", "7B", "37M", "22B", "-", "34B", "12M", "14B", "-", "-", "26B", "-", "-", "4M", "-", "41M", "92M", "174B", "-", "-", "58B", "4M", "18M", "68B", "-", "-", "11B", "1M", "1M", "9M", "53B", "-", "118B", "13M", "12B", "2B", "20M", "12B", "6M", "79B", "12B", "136M", "2M", "19M", "45M", "1B", "-", "-", "110B", "74M", "71B", "31B", "22M", "-", "22B", "289M", "81B", "221B", "45B", "-", "-", "78B", "2M", "32M", "-", "12B", "70M", "-", "53M", "8B", "96B", "12B", "-", "-", "62M", "-", "21M", "106M", "10B", "-", "25M", "101M", "15B", "31B", "278M", "41B", "67B", "127M", "32M", "-", "194B", "47B", "-", "-", "46B", "31B", "320M", "35B", "31M", "77B", "27M", "39B", "39B", "55M", "-", "4M", "109M", "-", "26B", "8B", "21B", "27B", "58B", "-", "34B", "9B", "-", "397M", "43M", "21M", "165M", "-", "-", "10B", "68M", "78M", "63M", "12B", "-", "-", "176M", "7M", "72B", "71M", "-", "-", "-", "-", "2M", "12M", "23M", "-", "37B", "34M", "175B", "18M", "6B", "-", "13B", "-", "15B", "128B", "14M", "-", "-", "-", "127B", "62B", "3B", "140M", "14B", "2B", "-", "5B", "-", "30M", "-", "176B", "54M", "4M", "-", "69M", "-", "-", "36B", "36M", "-", "42M", "3B", "9B", "-", "18M", "-", "1B", "47M", "5M", "81B", "2M", "3B", "35M", "46B", "136M", "201B", "14B", "31B", "77M", "1M", "6B", "7B", "7B", "29B", "-", "57B", "21B", "-", "7B", "-", "-", "29B", "-", "-", "45M", "2B", "132B", "94M", "-", "26M", "27M", "37M", "87B", "6M", "39B", "95M", "-", "-", "-", "13B", "15M", "-", "-", "3M", "48B", "-", "6B", "27M", "9M", "23M", "7B", "4B", "45M", "34B", "-", "-"},
            LEFT = {"-", "9M", "41B", "-", "1B", "4M", "8M", "83M", "-", "-", "1M", "38M", "-", "8M", "61M", "-", "8B", "27B", "1M", "46B", "-", "122M", "-", "23M", "10M", "-", "37B", "3B", "28M", "38M", "28M", "34B", "37B", "13M", "25M", "-", "3B", "6M", "23M", "21B", "-", "41B", "4M", "15M", "153M", "10B", "-", "-", "-", "5B", "44B", "-", "78B", "66B", "3B", "4B", "72M", "-", "-", "52B", "77M", "330M", "-", "52B", "13M", "42B", "-", "23M", "1B", "-", "-", "38M", "9M", "6B", "22M", "-", "11M", "3M", "4M", "-", "112M", "38M", "3B", "80B", "-", "36B", "-", "3B", "-", "-", "99M", "-", "-", "41B", "3M", "-", "-", "28M", "27M", "-", "1M", "5B", "25B", "-", "31B", "-", "-", "55B", "-", "112B", "-", "-", "5M", "69B", "-", "208B", "92M", "10B", "75B", "24M", "9B", "118M", "1M", "8B", "13M", "13M", "-", "-", "87B", "12M", "-", "-", "-", "-", "-", "175B", "14B", "-", "8B", "130M", "34M", "-", "95B", "488M", "25B", "-", "-", "-", "7M", "13B", "22M", "-", "83M", "-", "180B", "99M", "12M", "276B", "210M", "9M", "77M", "7B", "8M", "5B", "370B", "22B", "4M", "3B", "-", "1M", "-", "-", "50B", "127B", "-", "-", "134B", "23M", "12B", "75B", "-", "6M", "64M", "9B", "3B", "31M", "-", "141B", "179B", "-", "-", "18B", "111B", "26B", "6M", "9B", "21B", "-", "-", "-", "-", "53B", "3M", "-", "3B", "24B", "65B", "19B", "9B", "11B", "-", "12M", "9M", "68B", "7M", "5M", "3B", "70M", "99M", "32B", "4B", "231M", "-", "16B", "-", "202B", "-", "109M", "81B", "18B", "-", "168B", "122M", "219M", "11B", "-", "-", "143B", "93M", "-", "-", "32B", "-", "1M", "63M", "-", "-", "14B", "6B", "-", "92B", "-", "-", "-", "-", "50B", "200M", "62M", "-", "10B", "10M", "106M", "18B", "-", "-", "-", "33M", "3M", "-", "13M", "34B", "124B", "49M", "16M", "226M", "-", "50B", "101M", "-", "101M", "32B", "50B", "3B", "-", "4B", "25M", "-", "13M", "-", "13B", "221B", "-", "6B", "177M", "1M", "117M", "33M", "129M", "185M", "26M", "48M", "65M", "21B", "7B", "-", "268M", "-", "96B", "33M", "-", "-", "23B", "23M", "-", "14M", "-", "-", "-", "22M", "3B", "1M", "-", "3B", "-", "171B", "-", "3M", "-", "42B", "39B", "148B", "-", "6M", "43B", "-", "-", "15M", "2M", "-", "74M", "26M", "3M", "97M", "1M", "13M", "-", "188M", "72B", "5B", "88B", "30B", "22B", "162M", "-", "-", "5M", "200B", "-", "22B", "-", "37B", "-", "-", "-", "36M", "44B", "14M", "77M", "3B", "-", "8B", "40M", "-", "80B", "36B", "-", "-", "-", "88B", "109B", "-", "-", "4B", "6B", "11M", "10B", "-", "30B", "67B", "24M", "-", "80B", "-", "263B", "8B", "1B", "-", "1M", "4M", "8M", "-", "38M", "135M", "-", "-", "40B", "24M", "-", "-", "72M", "-", "-", "5M", "5B", "-", "-", "29M", "84B", "27M", "41B", "95M", "85B", "2B", "18M", "-", "49M", "-", "-", "138B", "28B", "-", "2B", "23B", "9B", "-", "42M", "-", "-", "3B", "-", "154M", "3M", "4M", "29B", "18B", "6M", "2B", "-", "13B", "20M", "283M", "152M", "24M", "-", "6M", "-", "1M", "58M", "-", "-", "79M", "12B", "11B", "-", "3M", "12B", "75B", "-", "152M", "1M", "37B", "5B", "18B", "212M", "18B", "11B", "1B", "-", "92B", "1B", "84B", "14M", "49B", "40B", "1B", "24B", "5M", "6M", "-", "17B", "17B", "3M", "9B", "3M", "29B", "-", "2B", "3B", "-", "-"},
            RIGHT = {"47M", "-", "1B", "2B", "58M", "1B", "1M", "44B", "8M", "106B", "-", "77M", "-", "50B", "16M", "107M", "-", "8M", "-", "-", "-", "102M", "-", "5B", "-", "6M", "-", "-", "-", "11M", "5B", "136B", "-", "-", "-", "1M", "2M", "-", "11B", "-", "-", "38B", "-", "5B", "4M", "53B", "33B", "12B", "49M", "68B", "279B", "-", "-", "16B", "10B", "28B", "23B", "4B", "-", "-", "161B", "80B", "44M", "16B", "134M", "238B", "5M", "6B", "-", "-", "23M", "42M", "175M", "17M", "-", "62M", "-", "70M", "2B", "-", "35M", "60B", "-", "168M", "78M", "206B", "1M", "4B", "-", "5M", "11B", "9B", "72M", "16M", "-", "173B", "4B", "25B", "3B", "1B", "15B", "104B", "16M", "-", "-", "3M", "1B", "6M", "-", "13M", "213B", "-", "9M", "192B", "5B", "39B", "-", "39M", "114B", "2B", "-", "2M", "209B", "7B", "176B", "3M", "54B", "19B", "40B", "29M", "1B", "2B", "-", "88M", "-", "36M", "11B", "3M", "-", "43M", "273M", "-", "24B", "-", "43M", "9M", "21B", "17B", "-", "14B", "-", "88M", "154M", "50B", "118B", "135B", "-", "5B", "-", "101M", "4M", "70B", "-", "35M", "4M", "-", "-", "167M", "-", "201M", "50B", "20M", "-", "-", "17M", "21B", "6M", "1M", "64M", "109M", "-", "18B", "30B", "-", "3B", "-", "6B", "3M", "5B", "-", "-", "-", "-", "10M", "5B", "10B", "2M", "76B", "124B", "114M", "6B", "112B", "31B", "-", "22B", "-", "-", "41B", "78M", "-", "-", "26M", "165M", "131B", "36B", "-", "98M", "36B", "1B", "37B", "48B", "15M", "19M", "-", "17M", "-", "1M", "14B", "-", "24M", "-", "55B", "101B", "186M", "62M", "51B", "14B", "91B", "-", "75M", "61B", "144B", "14M", "107M", "-", "106B", "95B", "51M", "8M", "92B", "45M", "100M", "1B", "80M", "-", "1M", "34B", "4M", "10B", "-", "-", "9B", "213M", "116B", "-", "74B", "9M", "9M", "-", "49M", "45M", "-", "6B", "42M", "51M", "1M", "80B", "62M", "-", "82M", "94M", "201M", "159B", "118B", "18M", "-", "-", "189B", "21M", "-", "27B", "85B", "107B", "144B", "21B", "-", "8M", "-", "23B", "4M", "4B", "43M", "103B", "172M", "23M", "-", "-", "1B", "56B", "-", "17B", "104B", "11B", "3M", "32B", "7B", "27M", "4B", "-", "89B", "9B", "318M", "138M", "-", "11B", "-", "-", "19M", "-", "-", "-", "25M", "47B", "148B", "1M", "-", "-", "79B", "20B", "130M", "66B", "84M", "76B", "-", "80M", "-", "-", "4M", "57M", "-", "17M", "9B", "-", "-", "109B", "104B", "9M", "15B", "-", "13B", "-", "-", "170B", "-", "2B", "-", "105B", "84B", "28B", "35M", "5M", "51B", "-", "7M", "7M", "46M", "-", "-", "119M", "6B", "78B", "81B", "57B", "174M", "23B", "12B", "42B", "60M", "30B", "22M", "15M", "-", "-", "19M", "7M", "-", "9M", "197M", "20M", "31M", "2M", "85M", "7B", "89M", "4M", "61M", "76B", "1M", "-", "29B", "62B", "120B", "225B", "20M", "31M", "46B", "-", "-", "-", "16B", "1B", "-", "54B", "31M", "103B", "2B", "273M", "-", "11M", "29M", "120M", "-", "-", "-", "67M", "-", "6M", "-", "16B", "-", "-", "20M", "264M", "46B", "235M", "-", "5B", "45M", "-", "-", "7M", "21M", "-", "-", "-", "106B", "1B", "1B", "-", "3M", "1M", "-", "3B", "-", "80M", "20M", "32M", "89B", "-", "111B", "4M", "28M", "2M", "1B", "-", "8M", "30B", "26B", "-", "9M", "40B", "-", "87B", "-", "-", "-", "-", "13B", "9B", "-", "-", "5B", "66M", "2M", "14B", "3M", "39B", "18M", "23B", "8B"},
            DOWN = {"16B", "1M", "1M", "54M", "9B", "9B", "125M", "3M", "-", "-", "25B", "-", "38M", "-", "118M", "-", "-", "-", "3M", "4M", "92B", "19B", "13M", "4B", "13M", "-", "53B", "2M", "-", "-", "236M", "23B", "156M", "6B", "53B", "73B", "19B", "25B", "-", "2B", "-", "15B", "5B", "125B", "150M", "67B", "135B", "1M", "13B", "38B", "21B", "14B", "29B", "-", "-", "18B", "47B", "-", "16B", "115B", "31B", "26M", "117B", "114M", "135M", "70M", "-", "8B", "12M", "7B", "6M", "-", "3M", "134B", "25B", "90B", "-", "-", "19M", "-", "26B", "-", "24M", "14M", "6M", "266M", "93B", "79B", "18B", "2M", "-", "5B", "1B", "323B", "40M", "1B", "5B", "-", "-", "-", "69B", "22B", "41B", "-", "-", "-", "374B", "106M", "30M", "15M", "106B", "-", "108B", "79B", "2B", "96B", "-", "23M", "186B", "-", "-", "61M", "28M", "90M", "21B", "158M", "16B", "-", "36M", "5B", "145M", "8B", "95M", "20M", "98M", "44M", "22B", "72B", "-", "8M", "7B", "11M", "230B", "17M", "65B", "-", "-", "33B", "141M", "-", "36M", "1M", "48M", "-", "52M", "13B", "7M", "21M", "10B", "40M", "4B", "116B", "46M", "163B", "32M", "48B", "58M", "22M", "10M", "38B", "1B", "29B", "9B", "8B", "86M", "68M", "1M", "-", "159B", "-", "-", "-", "33B", "28M", "25B", "116B", "70B", "-", "42B", "148M", "-", "68B", "61M", "189B", "80B", "44B", "9M", "-", "20B", "15B", "251M", "62B", "-", "87M", "8M", "38B", "74M", "1B", "-", "76B", "54M", "-", "-", "2B", "84B", "162B", "10B", "-", "208M", "-", "26M", "45M", "2B", "25M", "-", "-", "38B", "33M", "2M", "-", "49M", "81M", "174B", "66M", "29M", "2M", "45B", "33M", "4M", "17B", "13B", "56B", "-", "42M", "-", "81B", "-", "15M", "24M", "42M", "-", "-", "-", "63B", "-", "111M", "28M", "110B", "1M", "41B", "55M", "93M", "63B", "-", "49M", "-", "49B", "28B", "-", "9B", "5M", "-", "109M", "-", "3B", "33B", "68M", "-", "98B", "47M", "-", "-", "20M", "103M", "77B", "-", "44B", "-", "64B", "-", "50M", "13B", "24M", "33B", "80M", "-", "115B", "120M", "-", "15M", "26M", "-", "212M", "-", "53M", "25M", "-", "24B", "41M", "31M", "-", "-", "1B", "-", "-", "20B", "30B", "14M", "8M", "9M", "12B", "18M", "-", "3M", "-", "40B", "2M", "-", "-", "46M", "138B", "23M", "205B", "62M", "95B", "38B", "11M", "470M", "23M", "65M", "-", "28M", "104B", "86B", "39B", "4B", "-", "4M", "-", "-", "30B", "-", "6M", "32B", "15B", "80M", "93M", "-", "3B", "81B", "47M", "13M", "5B", "-", "67B", "144M", "-", "25M", "11M", "-", "47M", "1B", "-", "52B", "2B", "4B", "-", "-", "10B", "20M", "24M", "84B", "46B", "-", "-", "91M", "292B", "27B", "142M", "22B", "201M", "-", "-", "22M", "26B", "101B", "8M", "26B", "-", "83M", "143B", "5B", "-", "105M", "78M", "194M", "-", "-", "-", "94B", "38M", "4B", "50M", "-", "-", "99M", "36B", "7B", "49B", "8B", "-", "15B", "51B", "94B", "20M", "90M", "43B", "11B", "1B", "11M", "-", "61M", "24M", "1M", "1B", "20M", "-", "69B", "35B", "-", "-", "7M", "-", "40M", "1M", "-", "35B", "34M", "-", "12B", "-", "2B", "210M", "-", "22B", "53M", "153B", "4M", "-", "3B", "20B", "1B", "63M", "42B", "180B", "80B", "116B", "127B", "-", "11M", "24B", "5M", "1B", "-", "5M", "149B", "-", "2B", "-", "7B", "9B", "-", "3M", "143M", "62B", "-", "5B", "-", "14M", "9B", "127B", "12B", "-", "30B", "27M", "-", "-", "-", "7M", "15M"});
    }

// private:
//     string getContent(int idx) {
//         if (idx < 0) idx += 4*N;
//         if (idx >= 4*N) idx -= 4*N;

//         if (idx < N) return UP[idx];
//         idx -= N;
//         if (idx < N) return RIGHT[idx];
//         idx -= N;
//         if (idx < N) return DOWN[N-1-idx];
//         idx -= N;
//         return LEFT[N-1-idx];
//     }

//     int getSide(int idx) {
//         if (idx < N) return 0;
//         idx -= N;
//         if (idx < N) return 1;
//         idx -= N;
//         if (idx < N) return 2;
//         idx -= N;
//         return 3;
//     }

//     int getRowCol(int idx) {
//         if (idx < N) return idx;
//         idx -= N;
//         if (idx < N) return idx;
//         idx -= N;
//         if (idx < N) return N-1-idx;
//         idx -= N;
//         return N-1-idx;
//     }

//     void generateTC() {
//         UP.clear();
//         DOWN.clear();
//         LEFT.clear();
//         RIGHT.clear();

//         for (int i = 0; i < N; i++) {
//             UP.push_back(" ");
//             DOWN.push_back(" ");
//             LEFT.push_back(" ");
//             RIGHT.push_back(" ");
//         }

//         char ans[507][507];
//         for (int i = 0; i < N; i++) {
//             for (int j = 0; j < N; j++) {
//                 ans[i][j] = ' ';
//             }
//         }

//         for (int i = 0; i < N; i++) {
//             for (int j = 0; j < N; j++) {
//                 if (rnd.nextInt(100) < 1) {
//                     ans[i][j] = 'M';
//                     if (rnd.nextInt(2)) ans[i][j] = 'B';
//                 }
//             }
//         }

//         vector<int> tmp;
//         for (int i = 0; i < 4*N; i++) tmp.push_back(i);
//         rnd.shuffle(tmp.begin(), tmp.end());

//         for (int j = 0; j < 4*N; j++) {
//             if (getContent(tmp[j]) == " ") {
//                 int side = getSide(tmp[j]);
//                 int rowCol = getRowCol(tmp[j]);

//                 int maxVal = N;                
//                 char maxChar = ' ';
//                 vector<int> blanks;

//                 if (side == 0) {
//                     for (int i = 0; i < N; i++) {
//                         if (ans[i][rowCol] == ' ') blanks.push_back(i + 1);
//                         if (ans[i][rowCol] == 'M' || ans[i][rowCol] == 'B') {
//                             maxVal = i + 1;
//                             maxChar = ans[i][rowCol];
//                             i = N;
//                         }
//                     }
//                 } else if (side == 1) {
//                     for (int i = 0; i < N; i++) {
//                         if (ans[rowCol][N-1-i] == ' ') blanks.push_back(i + 1);
//                         if (ans[rowCol][N-1-i] == 'M' || ans[rowCol][N-1-i] == 'B') {
//                             maxVal = i + 1;
//                             maxChar = ans[rowCol][N-1-i];
//                             i = N;
//                         }
//                     }
//                 } else if (side == 2) {
//                     for (int i = 0; i < N; i++) {
//                         if (ans[N-1-i][rowCol] == ' ') blanks.push_back(i + 1);
//                         if (ans[N-1-i][rowCol] == 'M' || ans[N-1-i][rowCol] == 'B') {
//                             maxVal = i + 1;
//                             maxChar = ans[N-1-i][rowCol];
//                             i = N;
//                         }
//                     }
//                 } else if (side == 3) {
//                     for (int i = 0; i < N; i++) {
//                         if (ans[rowCol][i] == ' ') blanks.push_back(i + 1);
//                         if (ans[rowCol][i] == 'M' || ans[rowCol][i] == 'B') {
//                             maxVal = i + 1;
//                             maxChar = ans[rowCol][i];
//                             i = N;
//                         }
//                     }
//                 }

//                 int decision = rnd.nextInt(100);
//                 int NO_CLUE_PROB = 30;
//                 int ZERO_PROB = 5;
//                 int ON_MAX = 5;
//                 int USING_M = 30;
//                 int USING_B = 30;

//                 int finalVal = 0;
//                 char finalChar = ' ';
//                 string clue;

//                 if (decision < NO_CLUE_PROB) {
//                     clue = "-";
//                 } else if ((decision < NO_CLUE_PROB + ZERO_PROB && maxChar == ' ') || (maxChar == ' ' && blanks.empty())) {
//                     clue = "0";
//                 } else if ((decision < NO_CLUE_PROB + ZERO_PROB + ON_MAX && maxChar != ' ') || (maxChar != ' ' && blanks.empty())) {
//                     finalVal = maxVal;
//                     finalChar = maxChar;
//                     clue = to_string(maxVal) + maxChar;
//                 } else if (decision < NO_CLUE_PROB + ZERO_PROB + ON_MAX + USING_M) {
//                     finalVal = blanks[rnd.nextInt(blanks.size())];
//                     finalChar = 'M';
//                     clue = to_string(finalVal) + 'M';
//                 } else {
//                     finalVal = blanks[rnd.nextInt(blanks.size())];
//                     finalChar = 'B';
//                     clue = to_string(finalVal) + 'B';
//                 }

//                 if (side == 0) {
//                     UP[rowCol] = clue;
                    
//                     if (clue == "0") {
//                         for (int i = 0; i < N; i++) {
//                             ans[i][rowCol] = '-';
//                         }
//                     } else if (clue != "-") {
//                         int i;
//                         for (i = 0; i < finalVal-1; i++) {
//                             ans[i][rowCol] = '-';
//                         }
//                         ans[i][rowCol] = finalChar;
//                     }
//                 } else if (side == 1) {
//                     RIGHT[rowCol] = clue;
                    
//                     if (clue == "0") {
//                         for (int i = 0; i < N; i++) {
//                             ans[rowCol][N-1-i] = '-';
//                         }
//                     } else if (clue != "-") {
//                         int i;
//                         for (i = 0; i < finalVal-1; i++) {
//                             ans[rowCol][N-1-i] = '-';
//                         }
//                         ans[rowCol][N-1-i] = finalChar;
//                     }
//                 } else if (side == 2) {
//                     DOWN[rowCol] = clue;
                    
//                     if (clue == "0") {
//                         for (int i = 0; i < N; i++) {
//                             ans[N-1-i][rowCol] = '-';
//                         }
//                     } else if (clue != "-") {
//                         int i;
//                         for (i = 0; i < finalVal-1; i++) {
//                             ans[N-1-i][rowCol] = '-';
//                         }
//                         ans[N-1-i][rowCol] = finalChar;
//                     }
//                 } else if (side == 3) {
//                     LEFT[rowCol] = clue;
                    
//                     if (clue == "0") {
//                         for (int i = 0; i < N; i++) {
//                             ans[rowCol][i] = '-';
//                         }
//                     } else if (clue != "-") {
//                         int i;
//                         for (i = 0; i < finalVal-1; i++) {
//                             ans[rowCol][i] = '-';
//                         }
//                         ans[rowCol][i] = finalChar;
//                     }
//                 }
            
//                 // printf("%d %d: ", side, rowCol);
//                 // cout << clue << endl;

//                 // for (int i = 0; i < N; i++) {
//                 //     for (int j = 0; j < N; j++) {
//                 //         printf("%c", ans[i][j]);
//                 //     }
//                 //     printf("\n");
//                 // }
//             }
//         }

//         for (int i = 0; i < N; i++) {
//             if (UP[i] == " ") UP[i] = '-';
//             if (DOWN[i] == " ") DOWN[i] = '-';
//             if (LEFT[i] == " ") LEFT[i] = '-';
//             if (RIGHT[i] == " ") RIGHT[i] = '-';
//         }
//     }    
};
